（１）
DチームのオセロAI成果発表を行います。
＜クリック＞

(2)
まずは、用いた戦略ですが、
＜クリック＞

(3)
まず、前提として私達のチームは先手・後手の区別をせず、
どちらの手番でも同様のアルゴリズムを用いています。
そして、他のチームとは違う大きな１つの特徴として数手先読みを行っています。

考え方としては、
＜クリック＞

まず、自分の手番の時、自分が打つ事ができる箇所を全て探します。

＜クリック、矢印生成＞

そして、仮にそこに打ったとしたらどのような盤面になるのか、をそれぞれ生成します。

＜クリック、丸生成＞

この作業をもう一度繰り返します。
この盤面から敵が打てる場所を全て生成します。

＜クリック、矢印＞

そして、仮にそこに打ったとしたらどのような盤面になるのか、をそれぞれ生成します。

＜クリック、丸生成＞

このようにして、先読みを行っています。この図ではスペースの都合上2手先までの図ですが、私達のAIでは７手まで先を読んでいます。

そして、決められた手数まで読めたら、その盤面を評価します。
盤面の情報を評価関数に渡してやり、自分がどれくらい有理か、を数値で得ます。

＜クリック、数字生成＞

この数字が高いほど私達が有利、ということです。
当然、私達は一番この数字が高くなるように手を打っていくわけです。

しかし、敵は私達が不利になるような手を探して打ってきます。
つまり、この数字が一番小さくなるような手を敵は選択するだろう、と予測できます。


＜クリック、数字あがる＞

今度は私達が選択できるので、１番数字が高い手を選択します。

＜クリック＞
よって、この手が選択されます。

＜クリック＞

(4)
次に、どのように盤面や手を評価しているかについて説明します。

まず、私達の評価関数は、危険地帯、着手可能数、開放度、確定石、辺、山という６つの点から評価しています。


＜クリック＞
危険地帯ですが、これは角の１つ手前の３箇所のこういう所です。

ここにはなるべく置かないように評価値を下げています。

次は、着手可能数ですが、これは自分が置ける選択肢が多くなる方が有利、という話からきています。
よって、自分の選択肢が多ければ多いほど評価値を加算しています。

開放度は、相手の石を裏返した時、その周りにスペースがないほうが後々裏返されにくい、という考えをもとに作っています。

確定席は、厳密に数えると計算コストが高いので、角から連結している石の数を数えています。

あとは「辺」や「山」と呼ばれるパターンが存在し、辺は一般に不利、山は有利、と言われています。

＜クリック＞

(5)
次に、実装方法ですが、数手先を読むための探索の実装を非常に簡略的に記すとこの図のようになります。
実際にはパスの時やゲームオーバー時の処理や、スピードアップのためこれ以上の探索が不必要だと判断したものに関しては切り上げる、などの処理も実装しています。

まず、現在の盤面からどこに打てるか、というのを全て生成します。
そして、生成した全ての手に対して手をうち、次の盤面を得ます。
そして、自分の関数をもう一度呼び出します。
この時、読む予定の手数分再起していたら、その時点の盤面を評価し、値を返します。

そして、最大もしくは最小のスコアが上の階層へどんどん上がっていくイメージです。
このように、最終的にどの手を選ぶべきかの判断をしています。

評価関数の実装方法は他の方と似たような形になっていると思うので割愛します。

＜クリック＞

(6)
私達のチームは、ランダムで戦わせたり、読む手数を変えて戦わせたりもしましたが、
基本的には自分たちで手動で戦いました。

結果、練習試合後の状態の時は、ほぼ自分たちが圧勝でした。
そこで、評価関数を見直すとバグが沢山見つかり、それを修正することでそこそこ強くなりました。
やはり、言えることは戦略の良し悪し以前にその戦略の実装が正しく機能しているか見直すことが重要だと思います。

そして更に、読む手数を５手から７手にあげると飛躍的に強くなりました。
＜クリック＞

(7)
課題としてはこのような点があげられると思います。

序盤は下手に読むより定石に従って打った方がよほどの事がない限りつよいです。
更に、中盤と終盤で同じ考え方で評価していてはいけないはずですよね。

そして、評価値を正しくチューニングする必要もあります。
これは過去の棋譜を沢山用意して、ある局面から終局図までの完全よみを行って正確な評価値を得る。
その局面の着手可能数や確定石、開放度などの数を分析して記録する。
この操作を多数の局面について集める。
その局面の着手可能数や確定石などの要素の値を説明変数、完全読み切りから出した評価値を従属変数として
重回帰分析を行う、といった方法が考えられます。

そして、スピードをあげ、深くまで読めるようにする必要もあります。
これについては、なるべく二重のforループを減らしたりしてそもそもの計算量を減らす、といった方法と
最初に3手程度読んで、選ばれそうな手をソートしておいて、不必要な手を読む頻度を減らす、などが考えられます。






























